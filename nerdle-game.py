from tkinter import *
import random

#giving name to the file
root = Tk()
root.title("Nerdle Game")

def splice(n):
	'''This funtion calculates the result of a simple equation given as a string. It does so by slicing the string where the operator is and calculating the result of the resulting two strings using recursion.''' 
	p = 0
	t = 0
	#first checking if the string has any operator or not.
	for i in n:
		if i.isdigit() == False:
			p +=1
	#if the string has no operator, then the functions just gives an integer by directly changing the type of string.
	if p == 0:
		return int(n)
	
	q = 0
	a = ""
	b = ""
	e = ""
	c = 0
	minus = 0
	divi = 0
	#the following loops slices the string at the operators. The order at which the loops are put corresponds to the order of application of operators.
	for i in range(len(n)):
		if n[i] == "+":
			e = n[i]
			a = n[:i]
			b = n[i+1:]
			q = 1
			break
	#if the string has already been sliced at "+" sign, then the following loop doesn't work and same with all other for loops that follow
	if q != 1:
		for i in range(len(n)):
			if n[i] == "-":
				e = n[i]
				a = n[:i]
				b = n[i+1:]
				c = int(n[i+1])
				q = 1
				break
		#this loop is added because of how negative sign works,we will see it's use ahead
		for i in range(len(n)):
			if n[i] == "-":
				minus += 1

	if q != 1:
		for i in range(len(n)):	
			if n[i] == "*":
				e = n[i]
				a = n[:i]
				b = n[i+1:]
				q = 1
				break

	if q != 1:
		for i in range(len(n)):	
			if n[i] == "/":
				e = n[i]
				a = n[:i]
				b = n[i+1:]
				c = int(n[i+1])
				q = 1
				break
		#same as with negative sign, this loop is added due to different behaviour of division sign, it's use will be seen ahead
		for i in range(len(n)):
			if n[i] == "/":
				divi += 1
	
	#recursion is used to get result of sliced strings as integers
	r = splice(a)
	s = splice(b)
	#the following loops performs the operations on the recursed versions of sliced strings
	if e == "+":
		t = r + s
	#negative has two cases (when there only one minus sign and when there's more than one) because of it's behaviour
	if e == "-" and minus == 1:
		t = r - s
	if e == "-" and minus > 1:
		t = r + s - (2*c)
	if e == "*":
		t = r * s
	#division has two cases (when there only one divide sign and when there's more than one) because of it's behaviour
	if e == "/" and divi == 1:
		t = r / s
	if e == "/" and divi > 1:
		t = (r*s) / (c*c)

	return t

def eqgen():
	'''This funtion is usedto generate a random expression which fits the requirements to be an answer for our game. It generates a different answer every time the game is played'''
	#the equations generated are divided into 3 cases depending on number of digits of the result

	#first case where the answer is 2 digits long
	#this case has 4 more case	
	#this loop makes random expressions until their answer is a 2-digit integer 
	t = '1001/10'
	while 10 > splice(t) or splice(t) > 100 or type(splice(t)) == float:
		a = random.randint(1,9)
		b = random.randint(1,9)
		c = random.randint(1,9)
		d = random.randint(1,9)
		operators = ['+', '-','*','/']
		#the following are 5 cases where each case is generated by filling 5 places with random integers(1-digit) and operators
		p = ("{}{}{}{}{}".format(a, random.choice(operators),b,random.choice(operators),c))
		q = ("{}{}{}{}{}".format(a,b, random.choice(operators),c,d))
		r = ("{}{}{}{}{}".format(a,b,c, random.choice(operators),d))
		s = ("{}{}{}{}{}".format(a,random.choice(operators),b,c,d))
		#then we put the 5 expressions in list and randomly pick one of them
		l =[p,q,r,s]
		t = random.choice(l)
	
	#this loop makes random expressions until their answer is a 3-digit integer
	u = '10'
	while splice(u) < 99:
		a = random.randint(1,9)
		b = random.randint(1,9)
		c = random.randint(1,9)
		#filling 4 places with 3 random integers and "*" or "+" sign because only multiplication or addition can give us 3-digit numbers 
		p = ("{}*{}{}".format(a,b,c))
		q = ("{}{}*{}".format(a,b,c))
		r = ("{}{}+{}".format(a,b,c))
		s = ("{}+{}{}".format(a,b,c))
		#putting generated expressions in a list and then randomly choosing one of them
		l =[p,q,r,s]
		u = random.choice(l)
        
	#this loop makes random equations for a 1-digit answer
	v = '10'
	while splice(v) > 9 or splice(v) < 0 or type(splice(v)) == float:
		a = random.randint(1,9)
		b = random.randint(1,9)
		c = random.randint(1,9)
		d = random.randint(1,9)
		e = random.randint(1,9)
		operators = ['+', '-','*','/']
		#filling 6 places with random integers(1-digit) and operators
		p1 = ("{}{}{}{}{}{}".format(a,d, random.choice(operators),b,random.choice(operators),c))
		p2 = ("{}{}{}{}{}{}".format(a, random.choice(operators),b,d,random.choice(operators),c))
		p3 = ("{}{}{}{}{}{}".format(a, random.choice(operators),b,random.choice(operators),c,d))
		p4 = ("{}{}{}/{}{}".format(a,b,c,d,e))
		p5 = ("{}{}{}-{}{}".format(a,b,c,e,d))
		#again putting the generated expressions in a list and choosing one of them
		l = [p1,p2,p3,p4,p5]
		v = random.choice(l)
	
	#then we put the 3 chosen expressions in another list and choose one of them
	x = [t,u,v]
	y = random.choice(x)
	return y

#making our answer eqaution by taking the generated expression and it's result and putting them together
z = eqgen()
s = ("{}={}".format(z,splice(z)))

global ans 
ans = str(s)

def check1():
    en1 = e1.get()
    en2 = e2.get()
    en3 = e3.get()
    en4 = e4.get()
    en5 = e5.get()
    en6 = e6.get()
    en7 = e7.get()
    en8 = e8.get()
    guess = str(en1) + str(en2) + str(en3) + str(en4) + str(en5) + str(en6) + str(en7) + str(en8)
    clue = ''
    for i in range(len(guess)):
        if guess[i] == ans[i]:
            clue += "G"
        elif guess[i] in ans:
            clue += "Y"
        else:
            clue += "B"
    if 'GGGGGGGG' in clue:
        my_label_1 = Label(root, text=clue)
        my_label_1.grid(row=0, column=10)

        my_label_2= Label(root, text="You won!")
        my_label_2.grid(row = 9, column=0, columnspan=8)
    else:
        my_label_1 = Label(root, text=clue)
        my_label_1.grid(row=0, column=10)

def check2():
    en9 = e9.get()
    en10 = e10.get()
    en11 = e11.get()
    en12 = e12.get()
    en13 = e13.get()
    en14 = e14.get()
    en15 = e15.get()
    en16 = e16.get()
    guess = str(en9) + str(en10) + str(en11) + str(en12) + str(en13) + str(en14) + str(en15) + str(en16)
    clue = ''
    for i in range(len(guess)):
        if guess[i] == ans[i]:
            clue += "G"
        elif guess[i] in ans:
            clue += "Y"
        else:
            clue += "B"
    if 'GGGGGGGG' in clue:
        my_label_1 = Label(root, text=clue)
        my_label_1.grid(row=1, column=10)

        my_label_2= Label(root, text="You won!")
        my_label_2.grid(row = 9, column=0, columnspan=8)
    else:
        my_label_1 = Label(root, text=clue)
        my_label_1.grid(row=1, column=10)

def check3():
    en17 = e17.get()
    en18 = e18.get()
    en19 = e19.get()
    en20 = e20.get()
    en21 = e21.get()
    en22 = e22.get()
    en23 = e23.get()
    en24 = e24.get()
    guess = str(en17) + str(en18) + str(en19) + str(en20) + str(en21) + str(en22) + str(en23) + str(en24)
    clue = ''
    for i in range(len(guess)):
        if guess[i] == ans[i]:
            clue += "G"
        elif guess[i] in ans:
            clue += "Y"
        else:
            clue += "B"
    if 'GGGGGGGG' in clue:
        my_label_1 = Label(root, text=clue)
        my_label_1.grid(row=2, column=10)

        my_label_2= Label(root, text="You won!")
        my_label_2.grid(row = 9, column=0, columnspan=8)
    else:
        my_label_1 = Label(root, text=clue)
        my_label_1.grid(row=2, column=10)

def check4():
    en25 = e25.get()
    en26 = e26.get()
    en27 = e27.get()
    en28 = e28.get()
    en29 = e29.get()
    en30 = e30.get()
    en31 = e31.get()
    en32 = e32.get()
    guess = str(en25) + str(en26) + str(en27) + str(en28) + str(en29) + str(en30) + str(en31) + str(en32)
    clue = ''
    for i in range(len(guess)):
        if guess[i] == ans[i]:
            clue += "G"
        elif guess[i] in ans:
            clue += "Y"
        else:
            clue += "B"
    if 'GGGGGGGG' in clue:
        my_label_1 = Label(root, text=clue)
        my_label_1.grid(row=3, column=10)

        my_label_2= Label(root, text="You won!")
        my_label_2.grid(row = 9, column=0, columnspan=8)
    else:
        my_label_1 = Label(root, text=clue)
        my_label_1.grid(row=3, column=10)

def check5():
    en33 = e33.get()
    en34 = e34.get()
    en35 = e35.get()
    en36 = e36.get()
    en37 = e37.get()
    en38 = e38.get()
    en39 = e39.get()
    en40 = e40.get()
    guess = str(en33) + str(en34) + str(en35) + str(en36) + str(en37) + str(en38) + str(en39) + str(en40)
    clue = ''
    for i in range(len(guess)):
        if guess[i] == ans[i]:
            clue += "G"
        elif guess[i] in ans:
            clue += "Y"
        else:
            clue += "B"
    if 'GGGGGGGG' in clue:
        my_label_1 = Label(root, text=clue)
        my_label_1.grid(row=4, column=10)

        my_label_2= Label(root, text="You won!")
        my_label_2.grid(row = 9, column=0, columnspan=8)
    else:
        my_label_1 = Label(root, text=clue)
        my_label_1.grid(row=4, column=10)


def check6():
    en41 = e41.get()
    en42 = e42.get()
    en43 = e43.get()
    en44 = e44.get()
    en45 = e45.get()
    en46 = e46.get()
    en47 = e47.get()
    en48 = e8.get()
    guess = str(en41) + str(en42) + str(en43) + str(en44) + str(en45) + str(en46) + str(en47) + str(en48)
    clue = ''
    for i in range(len(guess)):
        if guess[i] == ans[i]:
            clue += "G"
        elif guess[i] in ans:
            clue += "Y"
        else:
            clue += "B"
    if 'GGGGGGGG' in clue:
        my_label_1 = Label(root, text=clue)
        my_label_1.grid(row=5, column=10)

        my_label_2= Label(root, text="You won!")
        my_label_2.grid(row = 9, column=0, columnspan=8)
    else:
        my_label_1 = Label(root, text=clue)
        my_label_1.grid(row=5, column=10)

#creating entry boxes
e1 = Entry(root, width=10)
e1.grid(row=0, column=0, ipady=20)

e2 = Entry(root, width=10)
e2.grid(row=0, column=1, ipady=20)

e3 = Entry(root, width=10)
e3.grid(row=0, column=2, ipady=20)

e4 = Entry(root, width=10)
e4.grid(row=0, column=3, ipady=20)

e5 = Entry(root, width=10)
e5.grid(row=0, column=4, ipady=20)

e6 = Entry(root, width=10)
e6.grid(row=0, column=5, ipady=20)

e7 = Entry(root, width=10)
e7.grid(row=0, column=6, ipady=20)

e8 = Entry(root, width=10)
e8.grid(row=0, column=7, ipady=20)

e9 = Entry(root, width=10)
e9.grid(row=1, column=0, ipady=20)

e10 = Entry(root, width=10)
e10.grid(row=1, column=1, ipady=20)

e11 = Entry(root, width=10)
e11.grid(row=1, column=2, ipady=20)

e12 = Entry(root, width=10)
e12.grid(row=1, column=3, ipady=20)

e13 = Entry(root, width=10)
e13.grid(row=1, column=4, ipady=20)

e14 = Entry(root, width=10)
e14.grid(row=1, column=5, ipady=20)

e15 = Entry(root, width=10)
e15.grid(row=1, column=6, ipady=20)

e16 = Entry(root, width=10)
e16.grid(row=1, column=7, ipady=20)

e17 = Entry(root, width=10)
e17.grid(row=2, column=0, ipady=20)

e18 = Entry(root, width=10)
e18.grid(row=2, column=1, ipady=20)

e19 = Entry(root, width=10)
e19.grid(row=2, column=2, ipady=20)

e20 = Entry(root, width=10)
e20.grid(row=2, column=3, ipady=20)

e21 = Entry(root, width=10)
e21.grid(row=2, column=4, ipady=20)

e22 = Entry(root, width=10)
e22.grid(row=2, column=5, ipady=20)

e23 = Entry(root, width=10)
e23.grid(row=2, column=6, ipady=20)

e24 = Entry(root, width=10)
e24.grid(row=2, column=7, ipady=20)

e25 = Entry(root, width=10)
e25.grid(row=3, column=0, ipady=20)

e26 = Entry(root, width=10)
e26.grid(row=3, column=1, ipady=20)

e27 = Entry(root, width=10)
e27.grid(row=3, column=2, ipady=20)

e28 = Entry(root, width=10)
e28.grid(row=3, column=3, ipady=20)

e29 = Entry(root, width=10)
e29.grid(row=3, column=4, ipady=20)

e30 = Entry(root, width=10)
e30.grid(row=3, column=5, ipady=20)

e31 = Entry(root, width=10)
e31.grid(row=3, column=6, ipady=20)

e32 = Entry(root, width=10)
e32.grid(row=3, column=7, ipady=20)

e33 = Entry(root, width=10)
e33.grid(row=4, column=0, ipady=20)

e34 = Entry(root, width=10)
e34.grid(row=4, column=1, ipady=20)

e35 = Entry(root, width=10)
e35.grid(row=4, column=2, ipady=20)

e36 = Entry(root, width=10)
e36.grid(row=4, column=3, ipady=20)

e37 = Entry(root, width=10)
e37.grid(row=4, column=4, ipady=20)

e38 = Entry(root, width=10)
e38.grid(row=4, column=5, ipady=20)

e39 = Entry(root, width=10)
e39.grid(row=4, column=6, ipady=20)

e40 = Entry(root, width=10)
e40.grid(row=4, column=7, ipady=20)

e41 = Entry(root, width=10)
e41.grid(row=5, column=0, ipady=20)

e42 = Entry(root, width=10)
e42.grid(row=5, column=1, ipady=20)

e43 = Entry(root, width=10)
e43.grid(row=5, column=2, ipady=20)

e44 = Entry(root, width=10)
e44.grid(row=5, column=3, ipady=20)

e45 = Entry(root, width=10)
e45.grid(row=5, column=4, ipady=20)

e46 = Entry(root, width=10)
e46.grid(row=5, column=5, ipady=20)

e47 = Entry(root, width=10)
e47.grid(row=5, column=6, ipady=20)

e48 = Entry(root, width=10)
e48.grid(row=5, column=7, ipady=20)

check_button1 = Button(root, text="Check", width=17, command=check1)
check_button1.grid(row=0, column=8,columnspan=2, ipady=17)

check_button2 = Button(root, text="Check", width=17, command=check2)
check_button2.grid(row=1, column=8,columnspan=2, ipady=17)

check_button3 = Button(root, text="Check", width=17, command=check3)
check_button3.grid(row=2, column=8,columnspan=2, ipady=17)

check_button4 = Button(root, text="Check", width=17, command=check4)
check_button4.grid(row=3, column=8,columnspan=2, ipady=17)

check_button5 = Button(root, text="Check", width=17, command=check5)
check_button5.grid(row=4, column=8,columnspan=2, ipady=17)

check_button6 = Button(root, text="Check", width=17, command=check6)
check_button6.grid(row=5, column=8,columnspan=2, ipady=17)

root.mainloop()